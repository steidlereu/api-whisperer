openapi: 3.0.0
info:
  title: Coffee Shop API
  description: API for managing a coffee shop's orders, customers, and menu items.
  version: 1.0.0
servers:
  - url: https://api.coffeeshop.com/v1
    description: Production server
  - url: https://staging-api.coffeeshop.com/v1
    description: Staging server
paths:
  /customers:
    get:
      summary: List all customers
      operationId: listCustomers
      tags:
        - Customers
      responses:
        '200':
          description: A list of customers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      operationId: createCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{customerId}:
    get:
      summary: Get a customer by ID
      operationId: getCustomer
      tags:
        - Customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    put:
      summary: Update a customer
      operationId: updateCustomer
      tags:
        - Customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      tags:
        - Customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Customer not found

  /orders:
    get:
      summary: List all orders
      operationId: listOrders
      tags:
        - Orders
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get an order by ID
      operationId: getOrder
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      summary: Update an order
      operationId: updateOrder
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    delete:
      summary: Delete an order
      operationId: deleteOrder
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted
        '404':
          description: Order not found

  /menu:
    get:
      summary: List all menu items
      operationId: listMenuItems
      tags:
        - Menu
      responses:
        '200':
          description: A list of menu items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
    post:
      summary: Create a new menu item
      operationId: createMenuItem
      tags:
        - Menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMenuItem'
      responses:
        '201':
          description: Menu item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'

  /menu/{itemId}:
    get:
      summary: Get a menu item by ID
      operationId: getMenuItem
      tags:
        - Menu
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A menu item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '404':
          description: Menu item not found
    put:
      summary: Update a menu item
      operationId: updateMenuItem
      tags:
        - Menu
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '200':
          description: Menu item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '404':
          description: Menu item not found
    delete:
      summary: Delete a menu item
      operationId: deleteMenuItem
      tags:
        - Menu
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Menu item deleted
        '404':
          description: Menu item not found

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - id
        - name
        - email

    NewCustomer:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - name
        - email

    Order:
      type: object
      properties:
        id:
          type: string
        customerId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number
          format: float
      required:
        - id
        - customerId
        - items
        - total

    NewOrder:
      type: object
      properties:
        customerId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - customerId
        - items

    OrderItem:
      type: object
      properties:
        itemId:
          type: string
        quantity:
          type: integer
      required:
        - itemId
        - quantity

    MenuItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - id
        - name
        - price

    NewMenuItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - name
        - price